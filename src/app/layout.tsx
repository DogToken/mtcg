// import type { Metadata } from "next";
"use client";

import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import SessionProviderWrapper from "./components/SessionProviderWrapper";
import Footer from "./components/Footer";
import React, { useEffect, useState } from "react";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// Remove static metadata, will be set dynamically
// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const [siteInfo, setSiteInfo] = useState({
    name: "Community Group",
    title: "Community Group",
    description: "A modern, open community for sharing, learning, and connecting.",
    header: "Community Group",
    logo: "/profile.png",
    favicon: "/favicon.ico",
  });

  useEffect(() => {
    fetch("/api/admin/siteinfo").then(res => res.json()).then(data => {
      if (data.info) setSiteInfo(data.info);
    });
  }, []);

  useEffect(() => {
    if (typeof document !== 'undefined') {
      document.title = siteInfo.title || "Community Group";
      const metaDesc = document.querySelector('meta[name="description"]');
      if (metaDesc) metaDesc.setAttribute('content', siteInfo.description || "A modern, open community for sharing, learning, and connecting.");
      else {
        const meta = document.createElement('meta');
        meta.name = "description";
        meta.content = siteInfo.description || "A modern, open community for sharing, learning, and connecting.";
        document.head.appendChild(meta);
      }
      // Open Graph
      const ogTitle = document.querySelector('meta[property="og:title"]') || (() => { const m = document.createElement('meta'); m.setAttribute('property', 'og:title'); document.head.appendChild(m); return m; })();
      ogTitle.setAttribute('content', siteInfo.title || "Community Group");
      const ogDesc = document.querySelector('meta[property="og:description"]') || (() => { const m = document.createElement('meta'); m.setAttribute('property', 'og:description'); document.head.appendChild(m); return m; })();
      ogDesc.setAttribute('content', siteInfo.description || "A modern, open community for sharing, learning, and connecting.");
      const ogImage = document.querySelector('meta[property="og:image"]') || (() => { const m = document.createElement('meta'); m.setAttribute('property', 'og:image'); document.head.appendChild(m); return m; })();
      ogImage.setAttribute('content', siteInfo.logo || '/profile.png');
      // Twitter Card
      const twCard = document.querySelector('meta[name="twitter:card"]') || (() => { const m = document.createElement('meta'); m.setAttribute('name', 'twitter:card'); document.head.appendChild(m); return m; })();
      twCard.setAttribute('content', 'summary_large_image');
      const twTitle = document.querySelector('meta[name="twitter:title"]') || (() => { const m = document.createElement('meta'); m.setAttribute('name', 'twitter:title'); document.head.appendChild(m); return m; })();
      twTitle.setAttribute('content', siteInfo.title || "Community Group");
      const twDesc = document.querySelector('meta[name="twitter:description"]') || (() => { const m = document.createElement('meta'); m.setAttribute('name', 'twitter:description'); document.head.appendChild(m); return m; })();
      twDesc.setAttribute('content', siteInfo.description || "A modern, open community for sharing, learning, and connecting.");
      const twImage = document.querySelector('meta[name="twitter:image"]') || (() => { const m = document.createElement('meta'); m.setAttribute('name', 'twitter:image'); document.head.appendChild(m); return m; })();
      twImage.setAttribute('content', siteInfo.logo || '/profile.png');
    }
  }, [siteInfo.title, siteInfo.description, siteInfo.logo]);

  // Dynamically update favicon
  useEffect(() => {
    if (typeof document !== 'undefined') {
      let favicon = document.querySelector('link[rel="icon"]');
      if (!favicon) {
        favicon = document.createElement('link');
        favicon.setAttribute('rel', 'icon');
        document.head.appendChild(favicon);
      }
      const testImg = new window.Image();
      testImg.onload = () => {
        favicon!.setAttribute('href', siteInfo.favicon || '/favicon.ico');
      };
      testImg.onerror = () => {
        favicon!.setAttribute('href', '/favicon.ico');
      };
      testImg.src = siteInfo.favicon || '/favicon.ico';
    }
  }, [siteInfo.favicon]);

  return (
    <html lang="en" className="dark">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased bg-background text-foreground min-h-screen flex flex-col`}
      >
        <SessionProviderWrapper>
          <main className="flex-1 w-full max-w-4xl mx-auto px-2 sm:px-4 py-4">
            {children}
          </main>
          <Footer />
        </SessionProviderWrapper>
      </body>
    </html>
  );
}
